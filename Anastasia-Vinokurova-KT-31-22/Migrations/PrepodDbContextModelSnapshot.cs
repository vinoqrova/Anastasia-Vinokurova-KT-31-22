// <auto-generated />
using Anastasia_Vinokurova_KT_31_22.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Anastasia_Vinokurova_KT_31_22.Migrations
{
    [DbContext(typeof(PrepodDbContext))]
    partial class PrepodDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Anastasia_Vinokurova_KT_31_22.Models.Cafedra", b =>
                {
                    b.Property<int>("CafedraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasComment("Идентификатор кафедры");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CafedraId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("c_admin_id")
                        .HasComment("Идентификатор администратора(заведующего) кафедры");

                    b.Property<string>("CafedraName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_cafedra_name")
                        .HasComment("Название кафедры");

                    b.HasKey("CafedraId")
                        .HasName("pk_Cafedra_Id");

                    b.HasIndex("AdminId");

                    b.HasIndex(new[] { "CafedraId" }, "idx_Cafedra_fk_admin_id_prepod_id");

                    b.ToTable("Cafedra", (string)null);
                });

            modelBuilder.Entity("Anastasia_Vinokurova_KT_31_22.Models.Degree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c_degree_id")
                        .HasComment("Bltynbabrfnjh cntgtyb");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DegreeId"));

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_degree_name")
                        .HasComment("Название степени (например, кандидат наук)");

                    b.HasKey("DegreeId")
                        .HasName("pk_Degree_degree_id");

                    b.ToTable("Degree");
                });

            modelBuilder.Entity("Anastasia_Vinokurova_KT_31_22.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("position_id")
                        .HasComment("Идентификатор должности");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionId"));

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_position_name")
                        .HasComment("Название должности (например, доцент)");

                    b.HasKey("PositionId")
                        .HasName("pk_Position_position_id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Anastasia_Vinokurova_KT_31_22.Models.Prepod", b =>
                {
                    b.Property<int>("PrepodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("prepod_id")
                        .HasComment("Идентификатор препода");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrepodId"));

                    b.Property<int>("CafedraId")
                        .HasColumnType("int")
                        .HasColumnName("c_cafedra_id")
                        .HasComment("Айди кафедры");

                    b.Property<int>("DegreeId")
                        .HasColumnType("int")
                        .HasColumnName("c_degree_id")
                        .HasComment("Степень(учёная) преподавателя");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("c_prepod_firstname")
                        .HasComment("Имя препода");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("c_prepod_lastname")
                        .HasComment("Фамилия препода");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("c_prepod_midname")
                        .HasComment("Отчество препода");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("c_position_id")
                        .HasComment("Должность преподавателя");

                    b.HasKey("PrepodId")
                        .HasName("pk_Prepod_prepod_id");

                    b.HasIndex(new[] { "DegreeId" }, "idx_Prepod_fk_degree_id");

                    b.HasIndex(new[] { "CafedraId" }, "idx_Prepod_fk_f_group_id");

                    b.HasIndex(new[] { "PositionId" }, "idx_Prepod_fk_position_id");

                    b.ToTable("Prepod", (string)null);
                });

            modelBuilder.Entity("Anastasia_Vinokurova_KT_31_22.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("para_id")
                        .HasComment("Идентификатор занятия");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("DayOfWeek")
                        .HasColumnType("tinyint")
                        .HasColumnName("c_schedule_day_of_week")
                        .HasComment("День недели (1-6 = Пн-Сб)");

                    b.Property<byte>("OrderInDay")
                        .HasColumnType("tinyint")
                        .HasColumnName("c_schedule_order_in_day")
                        .HasComment("Порядок занятия в дне (1-8)");

                    b.Property<int>("PrepodId")
                        .HasColumnType("int")
                        .HasColumnName("c_prepod_id")
                        .HasComment("Идентификатор преподавателя");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("c_subject_id")
                        .HasComment("Идентификатор предмета");

                    b.HasKey("Id")
                        .HasName("pk_Schedule_Id");

                    b.HasIndex(new[] { "PrepodId" }, "idx_Schedule_fk_prepod_id");

                    b.HasIndex(new[] { "SubjectId" }, "idx_Schedule_fk_subject_id");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("Anastasia_Vinokurova_KT_31_22.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("subject_id")
                        .HasComment("Идентификатор предмета");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("Помечено как удалённое (soft-delete)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_subject_name")
                        .HasComment("Название предмета");

                    b.HasKey("SubjectId")
                        .HasName("pk_Subject_subject_id");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("Anastasia_Vinokurova_KT_31_22.Models.Cafedra", b =>
                {
                    b.HasOne("Anastasia_Vinokurova_KT_31_22.Models.Prepod", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_admin_id_prepod_id");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Anastasia_Vinokurova_KT_31_22.Models.Prepod", b =>
                {
                    b.HasOne("Anastasia_Vinokurova_KT_31_22.Models.Cafedra", "Cafedra")
                        .WithMany()
                        .HasForeignKey("CafedraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_f_group_id");

                    b.HasOne("Anastasia_Vinokurova_KT_31_22.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_degree_id");

                    b.HasOne("Anastasia_Vinokurova_KT_31_22.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_position_id");

                    b.Navigation("Cafedra");

                    b.Navigation("Degree");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Anastasia_Vinokurova_KT_31_22.Models.Schedule", b =>
                {
                    b.HasOne("Anastasia_Vinokurova_KT_31_22.Models.Prepod", "Prepod")
                        .WithMany()
                        .HasForeignKey("PrepodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_prepod_id");

                    b.HasOne("Anastasia_Vinokurova_KT_31_22.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_subject_id");

                    b.Navigation("Prepod");

                    b.Navigation("Subject");
                });
#pragma warning restore 612, 618
        }
    }
}
